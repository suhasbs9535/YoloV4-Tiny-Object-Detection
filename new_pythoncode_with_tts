#python prgram 

import threading
import time
import queue
import cv2
import numpy as np
import pyttsx3

engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)
engine.setProperty('rate', 150)
engine.runAndWait()


def speak(sentence):
    engine.say(sentence)
    engine.runAndWait()
    

def mlmodel():
    net = cv2.dnn.readNet(r"C:\Users\Suhas\OneDrive\Documents\projectfolderenvision\yolov4-tiny\training\yolov4-tiny-custom_best.weights", r"C:\Users\Suhas\OneDrive\Documents\projectfolderenvision\yolov4-tiny\yolov4-tiny-custom.cfg")
    classes = []
    with open(r"C:\Users\Suhas\OneDrive\Documents\projectfolderenvision\yolov4-tiny\obj.names", "r") as f:
        classes = [line.strip() for line in f.readlines()]
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
    colors = np.random.uniform(0, 255, size=(len(classes), 3))
#importing camera
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        frame_id = 0
        frame_id += 1
        height, width, channels = frame.shape
  # Detecting objects
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)
    # Showing informations on the screen
        class_ids = []
        confidences = []
        boxes = []
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.2:
                    # Object detected
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)
                    # Rectangle coordinates
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)
                
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.4, 0.3)
        for i in range(len(boxes)):
            if i in indexes:
                x, y, w, h = boxes[i]
                global label
                label = str(classes[class_ids[i]])
                confidence = confidences[i]
                color = colors[class_ids[i]]
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.rectangle(frame, (x, y), (x + w, y + 30), color, -1)
                cv2.putText(frame, label + " " + str(round(confidence, 2)), (x, y + 30), 2, 3, (255,255,255), 3)
                starting_time=0.1
                elapsed_time = time.time() - starting_time
                fps = frame_id / elapsed_time
                cv2.putText(frame, "FPS: " + str(round(fps, 2)), (10, 50), 2, 3, (0, 0, 0), 3)
                
                q= queue.Queue()
                q.put(label)
                lab= q.get()
                def speech():
                    speak(f"{lab} ahead proceed with caution")
                t1= threading.Thread(target=mlmodel)
                t2= threading.Thread(target=speech)
                t1.start()
                t2.start()
                              

        cv2.imshow('Image', frame)
        if cv2.waitKey(1) == 13:
            break

    cap.release()
    cv2.destroyAllWindows()



if __name__=="__main__":
    mlmodel()
